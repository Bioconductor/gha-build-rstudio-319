+ Rscript -e 'Sys.setenv(BIOCONDUCTOR_USE_CONTAINER_REPOSITORY=FALSE); p <- .libPaths(); p <- c('\''/tmp/tmp/built'\'', p); .libPaths(p); if(BiocManager::install('\''Cepo'\'', INSTALL_opts = '\''--build'\'', update = TRUE, quiet = FALSE, dependencies=TRUE, force = TRUE, keep_outputs = TRUE) %in% rownames(installed.packages())) q(status = 0) else q(status = 1)'
'getOption("repos")' replaces Bioconductor standard repositories, see
'help("repositories", package = "BiocManager")' for details.
Replacement repositories:
    CRAN: https://p3m.dev/cran/__linux__/jammy/latest
Bioconductor version 3.19 (BiocManager 1.30.23), R 4.4.1 (2024-06-14)
Installing package(s) 'Cepo'
also installing the dependencies ‘tensorA’, ‘posterior’, ‘inline’, ‘loo’, ‘QuickJSR’, ‘rstan’, ‘rstantools’, ‘RcppParallel’, ‘StanHeaders’, ‘sitmo’, ‘gtools’, ‘caTools’, ‘bdsmatrix’, ‘mvtnorm’, ‘densEstBayes’, ‘DEoptimR’, ‘kernlab’, ‘segmented’, ‘magick’, ‘globals’, ‘listenv’, ‘parallelly’, ‘dotCall64’, ‘RcppHNSW’, ‘ScaledMatrix’, ‘irlba’, ‘rsvd’, ‘beeswarm’, ‘vipor’, ‘RcppEigen’, ‘FNN’, ‘RcppAnnoy’, ‘RSpectra’, ‘dqrng’, ‘RcppProgress’, ‘Cairo’, ‘startupmsg’, ‘sfsmisc’, ‘numDeriv’, ‘gplots’, ‘bbmle’, ‘reldist’, ‘robustbase’, ‘ResidualMatrix’, ‘bluster’, ‘metapod’, ‘mixtools’, ‘distributional’, ‘quadprog’, ‘SpatialExperiment’, ‘babelgene’, ‘sp’, ‘future’, ‘future.apply’, ‘progressr’, ‘spam’, ‘rex’, ‘scuttle’, ‘beachmat’, ‘BiocNeighbors’, ‘BiocSingular’, ‘ggbeeswarm’, ‘RcppML’, ‘uwot’, ‘ggrepel’, ‘ggrastr’, ‘distr’, ‘M3Drop’, ‘proxyC’, ‘ruv’, ‘cvTools’, ‘batchelor’, ‘scran’, ‘cowplot’, ‘fastmatch’, ‘AUCell’, ‘ggdist’, ‘ggpointdensity’, ‘GSVA’, ‘ggridges’, ‘msigdbr’, ‘UCell’, ‘SeuratObject’, ‘covr’, ‘UpSetR’, ‘scater’, ‘scMerge’, ‘fgsea’, ‘escape’, ‘pheatmap’

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/tensorA_0.36.2.1.tar.gz'
Content type 'binary/octet-stream' length 222106 bytes (216 KB)
==================================================
downloaded 216 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/posterior_1.6.0.tar.gz'
Content type 'binary/octet-stream' length 1035412 bytes (1011 KB)
==================================================
downloaded 1011 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/inline_0.3.19.tar.gz'
Content type 'binary/octet-stream' length 129829 bytes (126 KB)
==================================================
downloaded 126 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/loo_2.8.0.tar.gz'
Content type 'binary/octet-stream' length 1863576 bytes (1.8 MB)
==================================================
downloaded 1.8 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/QuickJSR_1.4.0.tar.gz'
Content type 'binary/octet-stream' length 2759770 bytes (2.6 MB)
==================================================
downloaded 2.6 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/rstan_2.32.6.tar.gz'
Content type 'binary/octet-stream' length 13569930 bytes (12.9 MB)
==================================================
downloaded 12.9 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/rstantools_2.4.0.tar.gz'
Content type 'binary/octet-stream' length 170075 bytes (166 KB)
==================================================
downloaded 166 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/RcppParallel_5.1.9.tar.gz'
Content type 'binary/octet-stream' length 1882125 bytes (1.8 MB)
==================================================
downloaded 1.8 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/StanHeaders_2.32.10.tar.gz'
Content type 'binary/octet-stream' length 3127667 bytes (3.0 MB)
==================================================
downloaded 3.0 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/sitmo_2.0.2.tar.gz'
Content type 'binary/octet-stream' length 171024 bytes (167 KB)
==================================================
downloaded 167 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/gtools_3.9.5.tar.gz'
Content type 'binary/octet-stream' length 361302 bytes (352 KB)
==================================================
downloaded 352 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/caTools_1.18.3.tar.gz'
Content type 'binary/octet-stream' length 204403 bytes (199 KB)
==================================================
downloaded 199 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/bdsmatrix_1.3-7.tar.gz'
Content type 'binary/octet-stream' length 293529 bytes (286 KB)
==================================================
downloaded 286 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/mvtnorm_1.3-1.tar.gz'
Content type 'binary/octet-stream' length 913171 bytes (891 KB)
==================================================
downloaded 891 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/densEstBayes_1.0-2.2.tar.gz'
Content type 'binary/octet-stream' length 2631341 bytes (2.5 MB)
==================================================
downloaded 2.5 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/DEoptimR_1.1-3.tar.gz'
Content type 'binary/octet-stream' length 74537 bytes (72 KB)
==================================================
downloaded 72 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/kernlab_0.9-33.tar.gz'
Content type 'binary/octet-stream' length 2039903 bytes (1.9 MB)
==================================================
downloaded 1.9 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/segmented_2.1-3.tar.gz'
Content type 'binary/octet-stream' length 1368140 bytes (1.3 MB)
==================================================
downloaded 1.3 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/magick_2.8.5.tar.gz'
Content type 'binary/octet-stream' length 5031718 bytes (4.8 MB)
==================================================
downloaded 4.8 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/globals_0.16.3.tar.gz'
Content type 'binary/octet-stream' length 108405 bytes (105 KB)
==================================================
downloaded 105 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/listenv_0.9.1.tar.gz'
Content type 'binary/octet-stream' length 106238 bytes (103 KB)
==================================================
downloaded 103 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/parallelly_1.38.0.tar.gz'
Content type 'binary/octet-stream' length 377764 bytes (368 KB)
==================================================
downloaded 368 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/dotCall64_1.2.tar.gz'
Content type 'binary/octet-stream' length 31200 bytes (30 KB)
==================================================
downloaded 30 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/RcppHNSW_0.6.0.tar.gz'
Content type 'binary/octet-stream' length 212900 bytes (207 KB)
==================================================
downloaded 207 KB

trying URL 'https://bioconductor.org/packages/3.19/bioc/src/contrib/ScaledMatrix_1.12.0.tar.gz'
Content type 'application/x-gzip' length 311705 bytes (304 KB)
==================================================
downloaded 304 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/irlba_2.3.5.1.tar.gz'
Content type 'binary/octet-stream' length 292018 bytes (285 KB)
==================================================
downloaded 285 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/rsvd_1.0.5.tar.gz'
Content type 'binary/octet-stream' length 3587464 bytes (3.4 MB)
==================================================
downloaded 3.4 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/beeswarm_0.4.0.tar.gz'
Content type 'binary/octet-stream' length 78309 bytes (76 KB)
==================================================
downloaded 76 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/vipor_0.4.7.tar.gz'
Content type 'binary/octet-stream' length 4581354 bytes (4.4 MB)
==================================================
downloaded 4.4 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/RcppEigen_0.3.4.0.2.tar.gz'
Content type 'binary/octet-stream' length 1845515 bytes (1.8 MB)
==================================================
downloaded 1.8 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/FNN_1.1.4.1.tar.gz'
Content type 'binary/octet-stream' length 128492 bytes (125 KB)
==================================================
downloaded 125 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/RcppAnnoy_0.0.22.tar.gz'
Content type 'binary/octet-stream' length 268812 bytes (262 KB)
==================================================
downloaded 262 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/RSpectra_0.16-2.tar.gz'
Content type 'binary/octet-stream' length 514056 bytes (502 KB)
==================================================
downloaded 502 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/dqrng_0.4.1.tar.gz'
Content type 'binary/octet-stream' length 212282 bytes (207 KB)
==================================================
downloaded 207 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/RcppProgress_0.4.2.tar.gz'
Content type 'binary/octet-stream' length 20170 bytes (19 KB)
==================================================
downloaded 19 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/Cairo_1.6-2.tar.gz'
Content type 'binary/octet-stream' length 84419 bytes (82 KB)
==================================================
downloaded 82 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/startupmsg_0.9.7.tar.gz'
Content type 'binary/octet-stream' length 40924 bytes (39 KB)
==================================================
downloaded 39 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/sfsmisc_1.1-19.tar.gz'
Content type 'binary/octet-stream' length 678101 bytes (662 KB)
==================================================
downloaded 662 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/numDeriv_2016.8-1.1.tar.gz'
Content type 'binary/octet-stream' length 114329 bytes (111 KB)
==================================================
downloaded 111 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/gplots_3.2.0.tar.gz'
Content type 'binary/octet-stream' length 496998 bytes (485 KB)
==================================================
downloaded 485 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/bbmle_1.0.25.1.tar.gz'
Content type 'binary/octet-stream' length 885978 bytes (865 KB)
==================================================
downloaded 865 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/reldist_1.7-2.tar.gz'
Content type 'binary/octet-stream' length 180397 bytes (176 KB)
==================================================
downloaded 176 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/robustbase_0.99-4-1.tar.gz'
Content type 'binary/octet-stream' length 3099436 bytes (3.0 MB)
==================================================
downloaded 3.0 MB

trying URL 'https://bioconductor.org/packages/3.19/bioc/src/contrib/ResidualMatrix_1.14.1.tar.gz'
Content type 'application/x-gzip' length 340839 bytes (332 KB)
==================================================
downloaded 332 KB

trying URL 'https://bioconductor.org/packages/3.19/bioc/src/contrib/bluster_1.14.0.tar.gz'
Content type 'application/x-gzip' length 2953678 bytes (2.8 MB)
==================================================
downloaded 2.8 MB

trying URL 'https://bioconductor.org/packages/3.19/bioc/src/contrib/metapod_1.12.0.tar.gz'
Content type 'application/x-gzip' length 330991 bytes (323 KB)
==================================================
downloaded 323 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/mixtools_2.0.0.tar.gz'
Content type 'binary/octet-stream' length 1434955 bytes (1.4 MB)
==================================================
downloaded 1.4 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/distributional_0.5.0.tar.gz'
Content type 'binary/octet-stream' length 478962 bytes (467 KB)
==================================================
downloaded 467 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/quadprog_1.5-8.tar.gz'
Content type 'binary/octet-stream' length 30827 bytes (30 KB)
==================================================
downloaded 30 KB

trying URL 'https://bioconductor.org/packages/3.19/bioc/src/contrib/SpatialExperiment_1.14.0.tar.gz'
Content type 'application/x-gzip' length 5406870 bytes (5.2 MB)
==================================================
downloaded 5.2 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/babelgene_22.9.tar.gz'
Content type 'binary/octet-stream' length 3651883 bytes (3.5 MB)
==================================================
downloaded 3.5 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/sp_2.1-4.tar.gz'
Content type 'binary/octet-stream' length 2102073 bytes (2.0 MB)
==================================================
downloaded 2.0 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/future_1.34.0.tar.gz'
Content type 'binary/octet-stream' length 657015 bytes (641 KB)
==================================================
downloaded 641 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/future.apply_1.11.2.tar.gz'
Content type 'binary/octet-stream' length 156906 bytes (153 KB)
==================================================
downloaded 153 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/progressr_0.14.0.tar.gz'
Content type 'binary/octet-stream' length 385025 bytes (376 KB)
==================================================
downloaded 376 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/spam_2.11-0.tar.gz'
Content type 'binary/octet-stream' length 2745204 bytes (2.6 MB)
==================================================
downloaded 2.6 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/rex_1.2.1.tar.gz'
Content type 'binary/octet-stream' length 126863 bytes (123 KB)
==================================================
downloaded 123 KB

trying URL 'https://bioconductor.org/packages/3.19/bioc/src/contrib/scuttle_1.14.0.tar.gz'
Content type 'application/x-gzip' length 1023814 bytes (999 KB)
==================================================
downloaded 999 KB

trying URL 'https://bioconductor.org/packages/3.19/bioc/src/contrib/beachmat_2.20.0.tar.gz'
Content type 'application/x-gzip' length 515309 bytes (503 KB)
==================================================
downloaded 503 KB

trying URL 'https://bioconductor.org/packages/3.19/bioc/src/contrib/BiocNeighbors_1.22.0.tar.gz'
Content type 'application/x-gzip' length 1042130 bytes (1017 KB)
==================================================
downloaded 1017 KB

trying URL 'https://bioconductor.org/packages/3.19/bioc/src/contrib/BiocSingular_1.20.0.tar.gz'
Content type 'application/x-gzip' length 614069 bytes (599 KB)
==================================================
downloaded 599 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/ggbeeswarm_0.7.2.tar.gz'
Content type 'binary/octet-stream' length 1756426 bytes (1.7 MB)
==================================================
downloaded 1.7 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/RcppML_0.3.7.tar.gz'
Content type 'binary/octet-stream' length 203211 bytes (198 KB)
==================================================
downloaded 198 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/uwot_0.2.2.tar.gz'
Content type 'binary/octet-stream' length 982068 bytes (959 KB)
==================================================
downloaded 959 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/ggrepel_0.9.6.tar.gz'
Content type 'binary/octet-stream' length 289304 bytes (282 KB)
==================================================
downloaded 282 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/ggrastr_1.0.2.tar.gz'
Content type 'binary/octet-stream' length 2675411 bytes (2.6 MB)
==================================================
downloaded 2.6 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/distr_2.9.5.tar.gz'
Content type 'binary/octet-stream' length 2132066 bytes (2.0 MB)
==================================================
downloaded 2.0 MB

trying URL 'https://bioconductor.org/packages/3.19/bioc/src/contrib/M3Drop_1.30.0.tar.gz'
Content type 'application/x-gzip' length 12722740 bytes (12.1 MB)
==================================================
downloaded 12.1 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/proxyC_0.4.1.tar.gz'
Content type 'binary/octet-stream' length 165272 bytes (161 KB)
==================================================
downloaded 161 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/ruv_0.9.7.1.tar.gz'
Content type 'binary/octet-stream' length 284019 bytes (277 KB)
==================================================
downloaded 277 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/cvTools_0.3.3.tar.gz'
Content type 'binary/octet-stream' length 205672 bytes (200 KB)
==================================================
downloaded 200 KB

trying URL 'https://bioconductor.org/packages/3.19/bioc/src/contrib/batchelor_1.20.0.tar.gz'
Content type 'application/x-gzip' length 2021105 bytes (1.9 MB)
==================================================
downloaded 1.9 MB

trying URL 'https://bioconductor.org/packages/3.19/bioc/src/contrib/scran_1.32.0.tar.gz'
Content type 'application/x-gzip' length 1797168 bytes (1.7 MB)
==================================================
downloaded 1.7 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/cowplot_1.1.3.tar.gz'
Content type 'binary/octet-stream' length 1380530 bytes (1.3 MB)
==================================================
downloaded 1.3 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/fastmatch_1.1-4.tar.gz'
Content type 'binary/octet-stream' length 35356 bytes (34 KB)
==================================================
downloaded 34 KB

trying URL 'https://bioconductor.org/packages/3.19/bioc/src/contrib/AUCell_1.26.0.tar.gz'
Content type 'application/x-gzip' length 1765386 bytes (1.7 MB)
==================================================
downloaded 1.7 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/ggdist_3.3.2.tar.gz'
Content type 'binary/octet-stream' length 2668836 bytes (2.5 MB)
==================================================
downloaded 2.5 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/ggpointdensity_0.1.0.tar.gz'
Content type 'binary/octet-stream' length 42656 bytes (41 KB)
==================================================
downloaded 41 KB

trying URL 'https://bioconductor.org/packages/3.19/bioc/src/contrib/GSVA_1.52.3.tar.gz'
Content type 'application/x-gzip' length 2390886 bytes (2.3 MB)
==================================================
downloaded 2.3 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/ggridges_0.5.6.tar.gz'
Content type 'binary/octet-stream' length 2262833 bytes (2.2 MB)
==================================================
downloaded 2.2 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/msigdbr_7.5.1.tar.gz'
Content type 'binary/octet-stream' length 6152551 bytes (5.9 MB)
==================================================
downloaded 5.9 MB

trying URL 'https://bioconductor.org/packages/3.19/bioc/src/contrib/UCell_2.8.0.tar.gz'
Content type 'application/x-gzip' length 1696680 bytes (1.6 MB)
==================================================
downloaded 1.6 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/SeuratObject_5.0.2.tar.gz'
Content type 'binary/octet-stream' length 2064218 bytes (2.0 MB)
==================================================
downloaded 2.0 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/covr_3.6.4.tar.gz'
Content type 'binary/octet-stream' length 328819 bytes (321 KB)
==================================================
downloaded 321 KB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/UpSetR_1.4.0.tar.gz'
Content type 'binary/octet-stream' length 4297543 bytes (4.1 MB)
==================================================
downloaded 4.1 MB

trying URL 'https://bioconductor.org/packages/3.19/bioc/src/contrib/scater_1.32.1.tar.gz'
Content type 'application/x-gzip' length 4123639 bytes (3.9 MB)
==================================================
downloaded 3.9 MB

trying URL 'https://bioconductor.org/packages/3.19/bioc/src/contrib/scMerge_1.20.0.tar.gz'
Content type 'application/x-gzip' length 3005240 bytes (2.9 MB)
==================================================
downloaded 2.9 MB

trying URL 'https://bioconductor.org/packages/3.19/bioc/src/contrib/fgsea_1.30.0.tar.gz'
Content type 'application/x-gzip' length 4948054 bytes (4.7 MB)
==================================================
downloaded 4.7 MB

trying URL 'https://bioconductor.org/packages/3.19/bioc/src/contrib/escape_2.0.0.tar.gz'
Content type 'application/x-gzip' length 3956112 bytes (3.8 MB)
==================================================
downloaded 3.8 MB

trying URL 'https://p3m.dev/cran/__linux__/jammy/latest/src/contrib/pheatmap_1.0.12.tar.gz'
Content type 'binary/octet-stream' length 77437 bytes (75 KB)
==================================================
downloaded 75 KB

trying URL 'https://bioconductor.org/packages/3.19/bioc/src/contrib/Cepo_1.10.2.tar.gz'
Content type 'application/x-gzip' length 3042070 bytes (2.9 MB)
==================================================
downloaded 2.9 MB

* installing *binary* package ‘tensorA’ ...
* ‘tensorA’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘tensorA’ as ‘tensorA_0.36.2.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (tensorA)
* installing *binary* package ‘inline’ ...
* ‘inline’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘inline’ as ‘inline_0.3.19_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (inline)
* installing *binary* package ‘QuickJSR’ ...
* ‘QuickJSR’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘QuickJSR’ as ‘QuickJSR_1.4.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (QuickJSR)
* installing *binary* package ‘RcppParallel’ ...
* ‘RcppParallel’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘RcppParallel’ as ‘RcppParallel_5.1.9_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (RcppParallel)
* installing *binary* package ‘sitmo’ ...
* ‘sitmo’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘sitmo’ as ‘sitmo_2.0.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (sitmo)
* installing *binary* package ‘gtools’ ...
* ‘gtools’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘gtools’ as ‘gtools_3.9.5_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (gtools)
* installing *binary* package ‘caTools’ ...
* ‘caTools’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘caTools’ as ‘caTools_1.18.3_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (caTools)
* installing *binary* package ‘bdsmatrix’ ...
* ‘bdsmatrix’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘bdsmatrix’ as ‘bdsmatrix_1.3-7_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (bdsmatrix)
* installing *binary* package ‘mvtnorm’ ...
* ‘mvtnorm’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘mvtnorm’ as ‘mvtnorm_1.3-1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (mvtnorm)
* installing *binary* package ‘DEoptimR’ ...
* ‘DEoptimR’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘DEoptimR’ as ‘DEoptimR_1.1-3_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (DEoptimR)
* installing *binary* package ‘kernlab’ ...
* ‘kernlab’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘kernlab’ as ‘kernlab_0.9-33_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (kernlab)
* installing *binary* package ‘segmented’ ...
* ‘segmented’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘segmented’ as ‘segmented_2.1-3_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (segmented)
* installing *binary* package ‘magick’ ...
* ‘magick’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘magick’ as ‘magick_2.8.5_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (magick)
* installing *binary* package ‘globals’ ...
* ‘globals’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘globals’ as ‘globals_0.16.3_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (globals)
* installing *binary* package ‘listenv’ ...
* ‘listenv’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘listenv’ as ‘listenv_0.9.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (listenv)
* installing *binary* package ‘parallelly’ ...
* ‘parallelly’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘parallelly’ as ‘parallelly_1.38.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (parallelly)
* installing *binary* package ‘dotCall64’ ...
* ‘dotCall64’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘dotCall64’ as ‘dotCall64_1.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (dotCall64)
* installing *binary* package ‘RcppHNSW’ ...
* ‘RcppHNSW’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘RcppHNSW’ as ‘RcppHNSW_0.6.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (RcppHNSW)
* installing *source* package ‘ScaledMatrix’ ...
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘ScaledMatrix’ as ‘ScaledMatrix_1.12.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (ScaledMatrix)
* installing *binary* package ‘irlba’ ...
* ‘irlba’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘irlba’ as ‘irlba_2.3.5.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (irlba)
* installing *binary* package ‘rsvd’ ...
* ‘rsvd’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘rsvd’ as ‘rsvd_1.0.5_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (rsvd)
* installing *binary* package ‘beeswarm’ ...
* ‘beeswarm’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘beeswarm’ as ‘beeswarm_0.4.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (beeswarm)
* installing *binary* package ‘vipor’ ...
* ‘vipor’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘vipor’ as ‘vipor_0.4.7_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (vipor)
* installing *binary* package ‘RcppEigen’ ...
* ‘RcppEigen’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘RcppEigen’ as ‘RcppEigen_0.3.4.0.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (RcppEigen)
* installing *binary* package ‘FNN’ ...
* ‘FNN’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘FNN’ as ‘FNN_1.1.4.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (FNN)
* installing *binary* package ‘RcppAnnoy’ ...
* ‘RcppAnnoy’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘RcppAnnoy’ as ‘RcppAnnoy_0.0.22_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (RcppAnnoy)
* installing *binary* package ‘RcppProgress’ ...
* ‘RcppProgress’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘RcppProgress’ as ‘RcppProgress_0.4.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (RcppProgress)
* installing *binary* package ‘Cairo’ ...
* ‘Cairo’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘Cairo’ as ‘Cairo_1.6-2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (Cairo)
* installing *binary* package ‘startupmsg’ ...
* ‘startupmsg’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘startupmsg’ as ‘startupmsg_0.9.7_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (startupmsg)
* installing *binary* package ‘sfsmisc’ ...
* ‘sfsmisc’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘sfsmisc’ as ‘sfsmisc_1.1-19_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (sfsmisc)
* installing *binary* package ‘numDeriv’ ...
* ‘numDeriv’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘numDeriv’ as ‘numDeriv_2016.8-1.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (numDeriv)
* installing *source* package ‘ResidualMatrix’ ...
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘ResidualMatrix’ as ‘ResidualMatrix_1.14.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (ResidualMatrix)
* installing *source* package ‘metapod’ ...
** using staged installation
** libs
using C++ compiler: ‘g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’
using C++11
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c combine_group.cpp -o combine_group.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c combine_parallel.cpp -o combine_parallel.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c count_direction.cpp -o count_direction.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c summarize_direction.cpp -o summarize_direction.o
g++ -std=gnu++11 -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o metapod.so RcppExports.o combine_group.o combine_parallel.o count_direction.o summarize_direction.o -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-metapod/00new/metapod/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘metapod’ as ‘metapod_1.12.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (metapod)
* installing *binary* package ‘quadprog’ ...
* ‘quadprog’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘quadprog’ as ‘quadprog_1.5-8_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (quadprog)
* installing *binary* package ‘babelgene’ ...
* ‘babelgene’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘babelgene’ as ‘babelgene_22.9_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (babelgene)
* installing *binary* package ‘sp’ ...
* ‘sp’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘sp’ as ‘sp_2.1-4_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (sp)
* installing *binary* package ‘progressr’ ...
* ‘progressr’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘progressr’ as ‘progressr_0.14.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (progressr)
* installing *binary* package ‘rex’ ...
* ‘rex’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘rex’ as ‘rex_1.2.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (rex)
* installing *source* package ‘beachmat’ ...
** using staged installation
** libs
using C++ compiler: ‘g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’
using C++17
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c delayed_isometric_binary.cpp -o delayed_isometric_binary.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c delayed_isometric_math.cpp -o delayed_isometric_math.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c delayed_isometric_unary.cpp -o delayed_isometric_unary.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c delayed_other.cpp -o delayed_other.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c dense_matrix.cpp -o dense_matrix.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c fragment_sparse_rows.cpp -o fragment_sparse_rows.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c sparse_matrix.cpp -o sparse_matrix.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c tatami_utils.cpp -o tatami_utils.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c unknown_matrix.cpp -o unknown_matrix.o
g++ -std=gnu++17 -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o beachmat.so RcppExports.o delayed_isometric_binary.o delayed_isometric_math.o delayed_isometric_unary.o delayed_other.o dense_matrix.o fragment_sparse_rows.o sparse_matrix.o tatami_utils.o unknown_matrix.o -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-beachmat/00new/beachmat/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘beachmat’ as ‘beachmat_2.20.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (beachmat)
* installing *binary* package ‘ggrepel’ ...
* ‘ggrepel’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘ggrepel’ as ‘ggrepel_0.9.6_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (ggrepel)
* installing *binary* package ‘proxyC’ ...
* ‘proxyC’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘proxyC’ as ‘proxyC_0.4.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (proxyC)
* installing *binary* package ‘ruv’ ...
* ‘ruv’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘ruv’ as ‘ruv_0.9.7.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (ruv)
* installing *binary* package ‘cowplot’ ...
* ‘cowplot’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘cowplot’ as ‘cowplot_1.1.3_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (cowplot)
* installing *binary* package ‘fastmatch’ ...
* ‘fastmatch’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘fastmatch’ as ‘fastmatch_1.1-4_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (fastmatch)
* installing *binary* package ‘ggpointdensity’ ...
* ‘ggpointdensity’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘ggpointdensity’ as ‘ggpointdensity_0.1.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (ggpointdensity)
* installing *binary* package ‘ggridges’ ...
* ‘ggridges’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘ggridges’ as ‘ggridges_0.5.6_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (ggridges)
* installing *binary* package ‘UpSetR’ ...
* ‘UpSetR’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘UpSetR’ as ‘UpSetR_1.4.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (UpSetR)
* installing *binary* package ‘pheatmap’ ...
* ‘pheatmap’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘pheatmap’ as ‘pheatmap_1.0.12_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (pheatmap)
* installing *source* package ‘Cepo’ ...
** using staged installation
** R
** data
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘Cepo’ as ‘Cepo_1.10.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (Cepo)
* installing *binary* package ‘rstantools’ ...
* ‘rstantools’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘rstantools’ as ‘rstantools_2.4.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (rstantools)
* installing *binary* package ‘StanHeaders’ ...
* ‘StanHeaders’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘StanHeaders’ as ‘StanHeaders_2.32.10_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (StanHeaders)
* installing *binary* package ‘RSpectra’ ...
* ‘RSpectra’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘RSpectra’ as ‘RSpectra_0.16-2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (RSpectra)
* installing *binary* package ‘dqrng’ ...
* ‘dqrng’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘dqrng’ as ‘dqrng_0.4.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (dqrng)
* installing *binary* package ‘gplots’ ...
* ‘gplots’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘gplots’ as ‘gplots_3.2.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (gplots)
* installing *binary* package ‘bbmle’ ...
* ‘bbmle’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘bbmle’ as ‘bbmle_1.0.25.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (bbmle)
* installing *binary* package ‘robustbase’ ...
* ‘robustbase’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘robustbase’ as ‘robustbase_0.99-4-1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (robustbase)
* installing *binary* package ‘mixtools’ ...
* ‘mixtools’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘mixtools’ as ‘mixtools_2.0.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (mixtools)
* installing *binary* package ‘distributional’ ...
* ‘distributional’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘distributional’ as ‘distributional_0.5.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (distributional)
* installing *source* package ‘SpatialExperiment’ ...
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘SpatialExperiment’ as ‘SpatialExperiment_1.14.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (SpatialExperiment)
* installing *binary* package ‘future’ ...
* ‘future’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘future’ as ‘future_1.34.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (future)
* installing *binary* package ‘spam’ ...
* ‘spam’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘spam’ as ‘spam_2.11-0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (spam)
* installing *source* package ‘scuttle’ ...
** using staged installation
** libs
using C++ compiler: ‘g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’
using C++11
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c cumulative_prop.cpp -o cumulative_prop.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c downsample_counts.cpp -o downsample_counts.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c fit_linear_model.cpp -o fit_linear_model.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c pool_size_factors.cpp -o pool_size_factors.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c sparse_summarize.cpp -o sparse_summarize.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c sum_counts.cpp -o sum_counts.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c utils.cpp -o utils.o
g++ -std=gnu++11 -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o scuttle.so RcppExports.o cumulative_prop.o downsample_counts.o fit_linear_model.o pool_size_factors.o sparse_summarize.o sum_counts.o utils.o -llapack -lblas -lgfortran -lm -lquadmath -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-scuttle/00new/scuttle/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘scuttle’ as ‘scuttle_1.14.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (scuttle)
* installing *source* package ‘BiocNeighbors’ ...
** using staged installation
** libs
using C++ compiler: ‘g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’
using C++11
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c annoy.cpp -o annoy.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c build_annoy.cpp -o build_annoy.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c build_hnsw.cpp -o build_hnsw.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c build_vptree.cpp -o build_vptree.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c distances.cpp -o distances.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c exhaustive.cpp -o exhaustive.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c find_annoy.cpp -o find_annoy.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c find_exhaustive.cpp -o find_exhaustive.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c find_hnsw.cpp -o find_hnsw.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c find_kmknn.cpp -o find_kmknn.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c find_mutual_nns.cpp -o find_mutual_nns.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c find_vptree.cpp -o find_vptree.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c hnsw.cpp -o hnsw.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c kmknn.cpp -o kmknn.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c query_annoy.cpp -o query_annoy.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c query_exhaustive.cpp -o query_exhaustive.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c query_hnsw.cpp -o query_hnsw.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c query_kmknn.cpp -o query_kmknn.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c query_vptree.cpp -o query_vptree.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c utils.cpp -o utils.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/RcppHNSW/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c vptree.cpp -o vptree.o
g++ -std=gnu++11 -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o BiocNeighbors.so RcppExports.o annoy.o build_annoy.o build_hnsw.o build_vptree.o distances.o exhaustive.o find_annoy.o find_exhaustive.o find_hnsw.o find_kmknn.o find_mutual_nns.o find_vptree.o hnsw.o kmknn.o query_annoy.o query_exhaustive.o query_hnsw.o query_kmknn.o query_vptree.o utils.o vptree.o -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-BiocNeighbors/00new/BiocNeighbors/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘BiocNeighbors’ as ‘BiocNeighbors_1.22.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (BiocNeighbors)
* installing *source* package ‘BiocSingular’ ...
** using staged installation
** libs
using C++ compiler: ‘g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’
using C++17
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c compute_scale.cpp -o compute_scale.o
g++ -std=gnu++17 -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o BiocSingular.so RcppExports.o compute_scale.o -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-BiocSingular/00new/BiocSingular/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘BiocSingular’ as ‘BiocSingular_1.20.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (BiocSingular)
* installing *binary* package ‘ggbeeswarm’ ...
* ‘ggbeeswarm’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘ggbeeswarm’ as ‘ggbeeswarm_0.7.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (ggbeeswarm)
* installing *binary* package ‘RcppML’ ...
* ‘RcppML’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘RcppML’ as ‘RcppML_0.3.7_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (RcppML)
* installing *binary* package ‘distr’ ...
* ‘distr’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘distr’ as ‘distr_2.9.5_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (distr)
* installing *binary* package ‘msigdbr’ ...
* ‘msigdbr’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘msigdbr’ as ‘msigdbr_7.5.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (msigdbr)
* installing *binary* package ‘covr’ ...
* ‘covr’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘covr’ as ‘covr_3.6.4_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (covr)
* installing *source* package ‘fgsea’ ...
** using staged installation
** libs
using C++ compiler: ‘g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’
using C++11
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/BH/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/BH/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c ScoreCalculation.cpp -o ScoreCalculation.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/BH/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c ScoreRuler.cpp -o ScoreRuler.o
In file included from /tmp/tmp/built/BH/include/boost/math/special_functions/detail/round_fwd.hpp:11,
                 from /tmp/tmp/built/BH/include/boost/math/special_functions/math_fwd.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/math/special_functions/digamma.hpp:15,
                 from util.h:5,
                 from ScoreRuler.cpp:2:
/tmp/tmp/built/BH/include/boost/math/tools/config.hpp:23:6: warning: #warning "The minimum language standard to use Boost.Math will be C++14 starting in July 2023 (Boost 1.82 release)" [-Wcpp]
   23 | #    warning "The minimum language standard to use Boost.Math will be C++14 starting in July 2023 (Boost 1.82 release)"
      |      ^~~~~~~
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/BH/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c esCalculation.cpp -o esCalculation.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/BH/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c fastGSEA.cpp -o fastGSEA.o
In file included from /tmp/tmp/built/BH/include/boost/math/special_functions/detail/round_fwd.hpp:11,
                 from /tmp/tmp/built/BH/include/boost/math/special_functions/math_fwd.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/math/special_functions/digamma.hpp:15,
                 from util.h:5,
                 from fastGSEA.cpp:13:
/tmp/tmp/built/BH/include/boost/math/tools/config.hpp:23:6: warning: #warning "The minimum language standard to use Boost.Math will be C++14 starting in July 2023 (Boost 1.82 release)" [-Wcpp]
   23 | #    warning "The minimum language standard to use Boost.Math will be C++14 starting in July 2023 (Boost 1.82 release)"
      |      ^~~~~~~
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/BH/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c fgseaMultilevel.cpp -o fgseaMultilevel.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/BH/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c fgseaMultilevelSupplement.cpp -o fgseaMultilevelSupplement.o
In file included from /tmp/tmp/built/BH/include/boost/math/special_functions/detail/round_fwd.hpp:11,
                 from /tmp/tmp/built/BH/include/boost/math/special_functions/math_fwd.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/math/special_functions/digamma.hpp:15,
                 from util.h:5,
                 from fgseaMultilevelSupplement.cpp:3:
/tmp/tmp/built/BH/include/boost/math/tools/config.hpp:23:6: warning: #warning "The minimum language standard to use Boost.Math will be C++14 starting in July 2023 (Boost 1.82 release)" [-Wcpp]
   23 | #    warning "The minimum language standard to use Boost.Math will be C++14 starting in July 2023 (Boost 1.82 release)"
      |      ^~~~~~~
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/BH/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c geseca.cpp -o geseca.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/BH/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c util.cpp -o util.o
In file included from /tmp/tmp/built/BH/include/boost/math/special_functions/detail/round_fwd.hpp:11,
                 from /tmp/tmp/built/BH/include/boost/math/special_functions/math_fwd.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/math/special_functions/digamma.hpp:15,
                 from util.h:5,
                 from util.cpp:1:
/tmp/tmp/built/BH/include/boost/math/tools/config.hpp:23:6: warning: #warning "The minimum language standard to use Boost.Math will be C++14 starting in July 2023 (Boost 1.82 release)" [-Wcpp]
   23 | #    warning "The minimum language standard to use Boost.Math will be C++14 starting in July 2023 (Boost 1.82 release)"
      |      ^~~~~~~
g++ -std=gnu++11 -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o fgsea.so RcppExports.o ScoreCalculation.o ScoreRuler.o esCalculation.o fastGSEA.o fgseaMultilevel.o fgseaMultilevelSupplement.o geseca.o util.o -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-fgsea/00new/fgsea/libs
** R
** data
*** moving datasets to lazyload DB
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘fgsea’ as ‘fgsea_1.30.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (fgsea)
* installing *binary* package ‘posterior’ ...
* ‘posterior’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘posterior’ as ‘posterior_1.6.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (posterior)
* installing *source* package ‘bluster’ ...
** using staged installation
** libs
using C++ compiler: ‘g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’
using C++11
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c build_snn.cpp -o build_snn.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c sum_neighbor_weights.cpp -o sum_neighbor_weights.o
g++ -std=gnu++11 -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o bluster.so RcppExports.o build_snn.o sum_neighbor_weights.o -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-bluster/00new/bluster/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘bluster’ as ‘bluster_1.14.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (bluster)
* installing *binary* package ‘future.apply’ ...
* ‘future.apply’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘future.apply’ as ‘future.apply_1.11.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (future.apply)
* installing *binary* package ‘uwot’ ...
* ‘uwot’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘uwot’ as ‘uwot_0.2.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (uwot)
* installing *binary* package ‘ggrastr’ ...
* ‘ggrastr’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘ggrastr’ as ‘ggrastr_1.0.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (ggrastr)
* installing *binary* package ‘cvTools’ ...
* ‘cvTools’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘cvTools’ as ‘cvTools_0.3.3_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (cvTools)
* installing *source* package ‘batchelor’ ...
** using staged installation
** libs
using C++ compiler: ‘g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’
using C++11
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c adjust_shift_variance.cpp -o adjust_shift_variance.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c find_mutual_nns.cpp -o find_mutual_nns.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c smooth_gaussian_kernel.cpp -o smooth_gaussian_kernel.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c utils.cpp -o utils.o
g++ -std=gnu++11 -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o batchelor.so RcppExports.o adjust_shift_variance.o find_mutual_nns.o smooth_gaussian_kernel.o utils.o -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-batchelor/00new/batchelor/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘batchelor’ as ‘batchelor_1.20.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (batchelor)
* installing *source* package ‘AUCell’ ...
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘AUCell’ as ‘AUCell_1.26.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (AUCell)
* installing *binary* package ‘ggdist’ ...
* ‘ggdist’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘ggdist’ as ‘ggdist_3.3.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (ggdist)
* installing *source* package ‘GSVA’ ...
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c kernel_estimation.c -o kernel_estimation.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c ks_test.c -o ks_test.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c register_cmethods.c -o register_cmethods.o
gcc -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o GSVA.so kernel_estimation.o ks_test.o register_cmethods.o -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-GSVA/00new/GSVA/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘GSVA’ as ‘GSVA_1.52.3_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (GSVA)
* installing *source* package ‘UCell’ ...
** using staged installation
** R
** data
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘UCell’ as ‘UCell_2.8.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (UCell)
* installing *binary* package ‘loo’ ...
* ‘loo’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘loo’ as ‘loo_2.8.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (loo)
* installing *source* package ‘scran’ ...
** using staged installation
** libs
using C++ compiler: ‘g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’
using C++11
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/tmp/tmp/built/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/tmp/tmp/built/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c choose_effect_size.cpp -o choose_effect_size.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/tmp/tmp/built/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c combine_rho.cpp -o combine_rho.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/tmp/tmp/built/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c compute_blocked_stats.cpp -o compute_blocked_stats.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/tmp/tmp/built/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c compute_residual_stats.cpp -o compute_residual_stats.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/tmp/tmp/built/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c compute_rho_null.cpp -o compute_rho_null.o
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>)>’
/tmp/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:318:12:   required from ‘struct boost::ForwardRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:281:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:281:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:318:12:   required from ‘struct boost::ForwardRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:318:12:   required from ‘struct boost::ForwardRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<std::vector<int> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:181:16:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:191:13:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:191:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:321:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::forward_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:321:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:321:9:   required from ‘struct boost::ForwardRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::ForwardIteratorConcept<Iterator>::~ForwardIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  197 |             BOOST_CONCEPT_USAGE(ForwardIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:181:16:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:322:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:322:9:   required from ‘struct boost::ForwardRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::ForwardIteratorConcept<Iterator>::~ForwardIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  197 |             BOOST_CONCEPT_USAGE(ForwardIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:218:14:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:218:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:355:9:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::bidirectional_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:355:9:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:355:9:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::BidirectionalIteratorConcept<Iterator>::~BidirectionalIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  224 |              BOOST_CONCEPT_USAGE(BidirectionalIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:356:9:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:356:9:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::BidirectionalIteratorConcept<Iterator>::~BidirectionalIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  224 |              BOOST_CONCEPT_USAGE(BidirectionalIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:239:14:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:239:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::random_access_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:373:9:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::RandomAccessIteratorConcept<Iterator>::~RandomAccessIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  245 |              BOOST_CONCEPT_USAGE(RandomAccessIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:374:9:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::RandomAccessIteratorConcept<Iterator>::~RandomAccessIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  245 |              BOOST_CONCEPT_USAGE(RandomAccessIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’:
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12: note: in a call to non-static member function ‘boost::RandomAccessRangeConcept<std::vector<int> >::~RandomAccessRangeConcept()’
  370 |     struct RandomAccessRangeConcept : BidirectionalRangeConcept<T>
      |            ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/size_type.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/size.hpp:21,
                 from /tmp/tmp/built/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /tmp/tmp/built/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<std::vector<int> >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:318:12:   required from ‘struct boost::ForwardRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = std::vector<int>]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:181:16:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::DefaultConstructible<TT>::~DefaultConstructible() [with TT = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:137:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  137 |     BOOST_CONCEPT_USAGE(DefaultConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::forward_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::ForwardIteratorConcept<Iterator>::~ForwardIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  197 |             BOOST_CONCEPT_USAGE(ForwardIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:181:16:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::DefaultConstructible<TT>::~DefaultConstructible() [with TT = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:137:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  137 |     BOOST_CONCEPT_USAGE(DefaultConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::ForwardIteratorConcept<Iterator>::~ForwardIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  197 |             BOOST_CONCEPT_USAGE(ForwardIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::bidirectional_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::BidirectionalIteratorConcept<Iterator>::~BidirectionalIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  224 |              BOOST_CONCEPT_USAGE(BidirectionalIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::BidirectionalIteratorConcept<Iterator>::~BidirectionalIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  224 |              BOOST_CONCEPT_USAGE(BidirectionalIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::random_access_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::RandomAccessIteratorConcept<Iterator>::~RandomAccessIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  245 |              BOOST_CONCEPT_USAGE(RandomAccessIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::RandomAccessIteratorConcept<Iterator>::~RandomAccessIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  245 |              BOOST_CONCEPT_USAGE(RandomAccessIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/tmp/tmp/built/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c cyclone_scores.cpp -o cyclone_scores.o
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>)>’
/tmp/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:152:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:278:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:318:12:   required from ‘struct boost::ForwardRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:281:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:281:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:318:12:   required from ‘struct boost::ForwardRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:318:12:   required from ‘struct boost::ForwardRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<std::vector<double> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:181:16:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:191:13:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:191:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:321:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::forward_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:321:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:321:9:   required from ‘struct boost::ForwardRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::ForwardIteratorConcept<Iterator>::~ForwardIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  197 |             BOOST_CONCEPT_USAGE(ForwardIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:181:16:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:322:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:322:9:   required from ‘struct boost::ForwardRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::ForwardIteratorConcept<Iterator>::~ForwardIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  197 |             BOOST_CONCEPT_USAGE(ForwardIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:218:14:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:218:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:355:9:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::bidirectional_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:355:9:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:355:9:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::BidirectionalIteratorConcept<Iterator>::~BidirectionalIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  224 |              BOOST_CONCEPT_USAGE(BidirectionalIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:356:9:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:356:9:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::BidirectionalIteratorConcept<Iterator>::~BidirectionalIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  224 |              BOOST_CONCEPT_USAGE(BidirectionalIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >]’:
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>)>’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:239:14:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:239:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::random_access_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:373:9:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::RandomAccessIteratorConcept<Iterator>::~RandomAccessIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  245 |              BOOST_CONCEPT_USAGE(RandomAccessIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:374:9:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::RandomAccessIteratorConcept<Iterator>::~RandomAccessIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  245 |              BOOST_CONCEPT_USAGE(RandomAccessIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept/assert.hpp:35,
                 from /tmp/tmp/built/BH/include/boost/concept_check.hpp:20,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’:
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12: note: in a call to non-static member function ‘boost::RandomAccessRangeConcept<std::vector<double> >::~RandomAccessRangeConcept()’
  370 |     struct RandomAccessRangeConcept : BidirectionalRangeConcept<T>
      |            ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from /tmp/tmp/built/BH/include/boost/concept_check.hpp:31,
                 from /tmp/tmp/built/BH/include/boost/range/concepts.hpp:19,
                 from /tmp/tmp/built/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<std::vector<double> >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:318:12:   required from ‘struct boost::ForwardRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = std::vector<double>]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:181:16:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::DefaultConstructible<TT>::~DefaultConstructible() [with TT = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:137:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  137 |     BOOST_CONCEPT_USAGE(DefaultConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::forward_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::ForwardIteratorConcept<Iterator>::~ForwardIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  197 |             BOOST_CONCEPT_USAGE(ForwardIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:181:16:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::DefaultConstructible<TT>::~DefaultConstructible() [with TT = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:137:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  137 |     BOOST_CONCEPT_USAGE(DefaultConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::ForwardIteratorConcept<Iterator>::~ForwardIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:197:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  197 |             BOOST_CONCEPT_USAGE(ForwardIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::bidirectional_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::BidirectionalIteratorConcept<Iterator>::~BidirectionalIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  224 |              BOOST_CONCEPT_USAGE(BidirectionalIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::BidirectionalIteratorConcept<Iterator>::~BidirectionalIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:224:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  224 |              BOOST_CONCEPT_USAGE(BidirectionalIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >]’
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::random_access_traversal_tag]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::RandomAccessIteratorConcept<Iterator>::~RandomAccessIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  245 |              BOOST_CONCEPT_USAGE(RandomAccessIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/tmp/tmp/built/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/tmp/tmp/built/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/tmp/tmp/built/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/tmp/tmp/built/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::RandomAccessIteratorConcept<Iterator>::~RandomAccessIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/tmp/tmp/built/BH/include/boost/range/concepts.hpp:245:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  245 |              BOOST_CONCEPT_USAGE(RandomAccessIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/tmp/tmp/built/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c overlap_exprs.cpp -o overlap_exprs.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/tmp/tmp/built/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fpic  -g -O2 -fstack-protector-strong -Wformat -Wformat-security -Wdate-time -D_FORTIFY_SOURCE=2 -g   -c rand_custom.cpp -o rand_custom.o
g++ -std=gnu++11 -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o scran.so RcppExports.o choose_effect_size.o combine_rho.o compute_blocked_stats.o compute_residual_stats.o compute_rho_null.o cyclone_scores.o overlap_exprs.o rand_custom.o -llapack -lblas -lgfortran -lm -lquadmath -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-scran/00new/scran/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘scran’ as ‘scran_1.32.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (scran)
* installing *binary* package ‘SeuratObject’ ...
* ‘SeuratObject’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘SeuratObject’ as ‘SeuratObject_5.0.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (SeuratObject)
* installing *source* package ‘scater’ ...
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘scater’ as ‘scater_1.32.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (scater)
* installing *binary* package ‘rstan’ ...
* ‘rstan’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘rstan’ as ‘rstan_2.32.6_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (rstan)
* installing *source* package ‘escape’ ...
** using staged installation
** R
** data
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘escape’ as ‘escape_2.0.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (escape)
* installing *binary* package ‘densEstBayes’ ...
* ‘densEstBayes’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘densEstBayes’ as ‘densEstBayes_1.0-2.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (densEstBayes)
* installing *binary* package ‘reldist’ ...
* ‘reldist’ was already a binary package and will not be rebuilt
* creating tarball
packaged installation of ‘reldist’ as ‘reldist_1.7-2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (reldist)
* installing *source* package ‘M3Drop’ ...
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘M3Drop’ as ‘M3Drop_1.30.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (M3Drop)
* installing *source* package ‘scMerge’ ...
** using staged installation
** R
** data
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘scMerge’ as ‘scMerge_1.20.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (scMerge)

The downloaded source packages are in
	‘/tmp/RtmpsveTbA/downloaded_packages’
Old packages: 'askpass', 'BiocManager', 'bslib', 'commonmark', 'cpp11',
  'credentials', 'curl', 'digest', 'evaluate', 'gert', 'glue', 'httr2',
  'jsonlite', 'knitr', 'openssl', 'pkgdown', 'pkgload', 'profvis', 'ps',
  'ragg', 'Rcpp', 'rmarkdown', 'roxygen2', 'rstudioapi', 'shiny', 'sys',
  'tinytex', 'usethis', 'waldo', 'withr', 'xfun', 'yaml', 'boot', 'foreign',
  'Matrix', 'nlme'

real	14m2.360s
user	12m36.728s
sys	1m8.682s
